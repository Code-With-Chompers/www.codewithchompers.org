---
title: Code with Chompers
layout: full
toc: false
---

## Welcome to a Coding Adventure with Chompers!

## Overview

## Wow, Python Source Code ... and its Output!

As you browse the technical resources on this site you will notice that they
often contain both Python source code and the output from running code. For
instance, here is the source code for a `duplicates` function that uses a
double-nested `for` loop to determine whether or not the `input_list` contains
a duplicate `int` value. This source code segments shows that both
`print(duplicates([1,2,6,3,4,5,6,7,8]))` and `print(not duplicates([1,2,3,4]))`
yield `True` as their output! Pretty cool, huh?

```{python}
from typing import List
def duplicates(input_list: List[int]) -> bool:
    """Determine whether or not the input list contains a duplicate value."""
    n = len(input_list)
    for i in range(n):
        for j in range(n):
            if i != j and input_list[i] == input_list[j]:
                return True
    return False

# use assertions to confirm that duplicates
# works as expected; note that assert only
# produces output if the condition is False
assert(duplicates([1,2,6,3,4,5,6,7,8]))
assert(not duplicates([1,2,3,4]))
# display the output of the functions calls
# to show that the output appears inline
print(duplicates([1,2,6,3,4,5,6,7,8]))
print(not duplicates([1,2,3,4]))
```

Thought this site, the source code that appears in an top-most region of a page
is available for use in later sections of the same page. For instance, the
following code defines a new `timetrials` function that can be used to time the
`duplicates` function in a doubling experiment. Wow, check it out! The output
from running the following function will produce a data table that reveals that
the likely worst-case time complexity of `duplicates` is $O(n^2)$. Are you
wondering how the data shows that `duplicate` is $O(n^2)$? Well, you can use the
data in the table to compute `0.23 / 0.05 = 4.6`, which suggests that as the
input size doubles, the time more than quadruples. 

```{python}
from typing import Callable
import time

def timetrials(function: Callable, n: int, trials: int = 10) -> List[float]:
    """Time a function with an input of size n for trials number of times."""
    totaltime = 0
    for _ in range(trials):
        start = time.time()
        function(list(range(n)))
        totaltime += time.time() - start
    print("Average time =%10.7f (s) for n = %d" % (totaltime/trials, n))
    return totaltime/trials

# conduct a doubling experiment for a provided function
timings = []
for n in [50, 100, 200, 400, 800, 1600, 3200]:
    timings.append(timetrials(duplicates, n))
```
